public class Example {
    public static void main(String[] args) {
        Example example = new Example();
        example.divisionByZero();
        example.nullPointerIssue();
        example.deadCodeIssue();
    }

    // Issue 1: Division by zero
    public void divisionByZero() {
        int x = 10;
        int y = 0; // This will cause an ArithmeticException
        int result = x / y;
        System.out.println("Result: " + result);
    }

    // Issue 2: Possible null pointer dereference
    public void nullPointerIssue() {
        String str = null;
        System.out.println(str.length());
    }

    // Issue 3: Dead code
    public void deadCodeIssue() {
        if (false) {
            System.out.println("This code is never reached.");
        }
    }

    // Issue 4: Unused variable
    public void unusedVariable() {
        int unused = 100;
    }

    // Issue 5: Empty catch block
    public void emptyCatchBlock() {
        try {
            int[] arr = new int[5];
            System.out.println(arr[10]);
        } catch (ArrayIndexOutOfBoundsException e) {
            // No action taken
        }
    }
}

/*

a4
probleme legate de tratarea exceptiilor in sistemul ales:
in cadrul codului java prezentat, putem observa ca exista o problema de tratare a exceptiilor la metoda "emptycatchblock". blocul "catch" este complet gol si nu gestioneaza deloc exceptia "arrayindexoutofboundsexception" care ar putea aparea.
problema principala cu acest mod de tratare a exceptiilor este ca nu ofera niciun fel de informatie utila despre eroare. daca exceptia apare, aceasta este complet ignorata, ceea ce face codul greu de depanat si vulnerabil la erori tacute (silent errors).


a5
raport spotbugs
1. division by zero (divisionbyzero method) - potentiala arithmeticexception.
2. possible null pointer dereference (nullpointerissue method) - potentiala nullpointerexception.
3. dead code (deadcodeissue method) - cod care nu va fi niciodata executat.
4. unused variable (unusedvariable method) - variabila neutilizata.
5. empty catch block (emptycatchblock method) - bloc catch gol, fara actiuni implementate.

propuneri de refactorizare:
1. division by zero: adaugarea unei conditii pentru a verifica daca impartitorul este zero inainte de efectuarea impartirii.
2. null pointer dereference: initializarea variabilei sau verificarea daca este null inainte de utilizare.
3. dead code: inlocuirea conditiei "false" cu o variabila booleana care sa fie dinamica.
4. unused variable: eliminarea variabilei daca nu este necesara sau folosirea acesteia in cadrul codului.
5. empty catch block: adaugarea unui mesaj de eroare sau a unei alte actiuni relevante in blocul "catch".


a6 
raport pmd
1. avoid empty catch blocks (emptycatchblock method) - bloc catch gol.
2. avoid unused variables (unusedvariable method) - variabila neutilizata.
3. avoid division by zero (divisionbyzero method) - impartire prin zero.
4. null pointer dereference (nullpointerissue method) - posibila eroare de tip nullpointerexception.
5. dead code (deadcodeissue method) - cod inaccesibil.

propuneri de refactorizare:
1. empty catch block: adaugarea unui mesaj de eroare sau logarea exceptiei in jurnalul aplicatiei.
2. unused variable: eliminarea variabilei sau utilizarea acesteia pentru o functionalitate reala.
3. division by zero: adaugarea unui "if" pentru verificarea impartitorului inainte de impartire.
4. null pointer dereference: verificarea valorii null inainte de a folosi obiectul.
5. dead code: inlocuirea conditiei "false" cu o conditie dinamica verificabila.
